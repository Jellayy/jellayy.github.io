---
title: "Traefik Reverse Proxy in Docker with TLS Certs"
header:
  image: /assets/images/2022-09-02-ultimate-truenas-guide/banner.png
toc: true
toc_sticky: true
categories:
  - Guides
tags:
  - Homelab
---

# Credits
Reverse Proxies and setting up authentication on them can be very hard to wrap your head around and get working at first. While I did my best and will continue to make this guide as comprehensive as possible, there are a few resources that made this guide possible:

[Joshua Avalon - Setup Traefik v2 Step by Step](https://joshuaavalon.io/setup-traefik-v2-step-by-step)

[Techno Tim - 2 Factor Auth and Single Sign on with Authelia](https://docs.technotim.live/posts/authelia-traefik/)

# Prerequisites

All files used in this guide can be found [here](https://github.com/Jellayy/jellayy.github.io/tree/master/resources/2022-09-25-traefik)

# Configuring Your Domain

## Cloudflare DNS

This setup will be based on using the Cloudflare API to manage DNS on your domain. We will be using DNS challenges to issue certs with LetsEncrypt.

### Import your domain as a Cloudflare site (Optional)

If you purchased your domain through cloudflare, feel free to skip this step. If you got your domain through another registrar, you can register your site through cloudflare using the steps below.

#### Change your DNS servers to Cloudflare's

If you haven't purchased your domain through Cloudflare, you can still continue with this guide by changing the DNS servers your domain uses over to Cloudflare's. Change your nameservers to: `connie.ns.cloudflare.com` and `cris.ns.cloudflare.com`

Here's an example using Hostinger's dashboard:

![Hostinger Example]({{ site.url }}{{ site.baseurl }}/assets/images/2022-09-25-traefik/nameservers.png)

#### Add your site to Cloudflare

After changing your DNS servers, you can add your site to Cloudflare under Websites>Add a Site. For our purposes, the free plan works fine.

### Create an API Key

Head over to the [Cloudflare API Tokens Page](https://dash.cloudflare.com/profile/api-tokens) and create a new API Token with `Zone.Zone` and `Zone.DNS` permissions on either just the sites you want or all of your sites.

![Cloudflare API Key]({{ site.url }}{{ site.baseurl }}/assets/images/2022-09-25-traefik/apikey.png)

# Deploying Traefik

## File Structure

Deploying Traefik isn't completely plug-and-play and needs some files to get started.

Wherever you wish to place your Traefik configuration files, create the following file structure. You'll need to create all files listed, traefik does not create them itself and will yell at you if you don't. Create `acme.json` as an empty file for traefik to fill, we will configure `traefik.yml` in the next step.

{% highlight bash %}
traefik
│   traefik.yml   
│
└───acme
│   │   acme.json
│   
└───dynamic
{% endhighlight %}

### traefik.yml

Below is an example basic configuration of `traefik.yml` that will serve our purposes for now

Github: [traefik.yml](https://github.com/Jellayy/jellayy.github.io/tree/master/resources/2022-09-25-traefik/traefik/traefik.yml)

{% highlight yaml %}
global:
  checkNewVersion: true
  sendAnonymousUsage: false  # true by default

# (Optional) Log information
log:
   level: INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL
   format: common  # common, json, logfmt
   filePath: /var/log/traefik/traefik.log

# (Optional) Enable API and Dashboard
api:
  dashboard: true  # true by default
  insecure: true  # Don't do this in production!

# Entry Points configuration
entryPoints:
  http:
    address: :80
  https:
    address: :443

# Configure your CertificateResolver here...
certificatesResolvers:
   letsEncrypt:
     acme:
       email: YOUR_EMAIL
       storage: /etc/traefik/acme/acme.json
       dnsChallenge:
         provider: cloudflare
         resolvers:
           - 1.1.1.1:53
           - 8.8.8.8:53
         delayBeforeCheck: 0

providers:
  docker:
    endpoint: unix:///var/run/docker.sock
    exposedByDefault: false  # Default is true
  file:
    # watch for dynamic configuration changes
    directory: /etc/traefik/dynamic
    watch: true
{% endhighlight %}

## Docker

### Proxy Network

Create a new attachable bridge network in Docker for Traefik to use. This can be done in the docker CLI or through a managment portal such as Portainer. We will attach our Traefik container and all other proxied containers to this network.

{% highlight bash %}
docker network create -d bridge --attachable proxy
{% endhighlight %}

![Portainer Network Create]({{ site.url }}{{ site.baseurl }}/assets/images/2022-09-25-traefik/portainer-network-create.png)

### Creating the Container

Deploy Traefik using Docker Compose

Github: [docker-compose.yml](https://github.com/Jellayy/jellayy.github.io/tree/master/resources/2022-09-25-traefik/traefik/docker-compose.yml)

{% highlight yaml %}
version: '3'

services:
  traefik:
    image: "traefik:v2.5"
    container_name: "traefik"
    environment:
      - CF_API_EMAIL=YOUR_EMAIL
      - CF_DNS_API_TOKEN=YOUR_API_KEY
      - CF_ZONE_API_TOKEN=YOUR_API_KEY
    networks:
      - proxy
    ports:
      - "80:80"
      - "443:443"
      # (Optional) Expose Dashboard
      - "42069:8080"  # Don't do this in production!
    volumes:
      - /config/docker/traefik-logs:/var/log/traefik
      - /config/docker/traefik:/etc/traefik
      - /var/run/docker.sock:/var/run/docker.sock:ro

networks:
  proxy:
    external: true
{% endhighlight %}

> Leaving your API keys exposed in docker-compose like this is not recommended. Environment variables in docker containers also aren't particularly secure. Running a secrets agent like the one built in to docker-swarm is recommended. Will I be covering that here? Absolutely not.

# Configuring local DNS

If you're using Traefik as a reverse proxy for exclusively local services, you will need to configure a wildcard DNS entry on your network's DNS server to point at Traefik, be that the DNS resolver on your router, or something more dedicated like a Pihole. Below I will include instructions for pfSense.

## pfSense

In pfSense you can create a wildcard entry in the `Custom Options` section of Unbound at Services>DNS Resolver>General Settings:

{% highlight bash %}
server:
local-zone: "example.com" redirect
local-data: "example.com 3600 IN A 192.168.1.54"
{% endhighlight %}

# Adding Docker Services to Traefik

Thankfully, once Traefik is configured, adding new services is a simple as adding some extra configuration to your containers. Here's a docker-compose example of deploying [Homer](https://github.com/bastienwirtz/homer), a static homepage service.

{% highlight yaml %}
---
version: "2"
services:
  homer:
    image: b4bz/homer
    container_name: homer
    networks:
      - proxy # Required for Traefik
    volumes:
      - /homer_assets:/www/assets
    user: 1000:1000
    labels:
      - "traefik.docker.network=proxy" # Connect to traefik's docker network
      - "traefik.enable=true" # Enable traefik
      - "traefik.http.routers.homer.rule=Host(`example.com`)" # Configure 'homer' router host rule
      - "traefik.http.routers.homer.entrypoints=https" # Enable https entrypoint on 'homer' router
      - "traefik.http.routers.homer.tls=true" # Enable tls on 'homer' router
      - "traefik.http.services.homer.loadbalancer.server.port=8080" # Port to redirect to in container
      - "traefik.http.routers.homer.tls.certresolver=letsEncrypt" # Use letsEncrypt certresolver defined in traefik.yml
    restart: unless-stopped

networks:
  proxy: # Add a refrence to traefik's docker network here
    external: true
{% endhighlight %}

If everything went well, your definied address should route to your service and your cert will be issued!

![Result]({{ site.url }}{{ site.baseurl }}/assets/images/2022-09-25-traefik/result.png)

# Authelia

Now that you have a reverse proxy setup, you can also setup a two-factor authentication service for the services behind traefik as well. Authelia is great for this.

## Deploying Authelia

### File Structure

Like Traefik, theres a bit of configuration we have to do before deploying Authelia. The file structure for Authelia is very simple:

{% highlight bash %}
authelia
│   configuration.yml 
│   users_database.yml 
{% endhighlight %}

#### configuration.yml

Github: [configuration.yml](https://github.com/Jellayy/jellayy.github.io/blob/master/resources/2022-09-25-traefik/authelia/configuration.yml)

There's a lot of stuff to configure in here, but to get started there's only a few things we need to do

- Create a `jwt_secret`, an alphanumeric key of 64 characters:

{% highlight yaml %}
jwt_secret: DHUAov7n9VTchKhgP5XRjraZdD6qJq2ck8SeMWjy2J5memk7JUwZEuZAoxKHkC7i
{% endhighlight %}

> I know what the top of the site says, but please make your own and don't copy paste this

- Change the `default_redirection_url` to the address you will give Authelia in Traefik

{% highlight yaml %}
default_redirection_url: https://auth.example.com
{% endhighlight %}

- Change the provided `access_control` policy. [Authelia Access-Control Docs](https://www.authelia.com/configuration/security/access-control/)

{% highlight yaml %}
access_control:
  default_policy: deny
  rules:
    # Rules applied to everyone
    - domain: service.example.com
      policy: two_factor
{% endhighlight %}

- Update the domain in the `session` section to the domain you're protecting

{% highlight yaml %}
domain: example.com  # Should match whatever your root protected domain is
{% endhighlight %}

- Generate an encryption key for sqlite storage

{% highlight yaml %}
storage:
  encryption_key: you_must_generate_a_random_string_of_more_than_twenty_chars_and_configure_this
{% endhighlight %}

- Setup email notifier for forgotten passwords.

I won't be covering how to get this setup with SMTP. There are simple ways to do this through your gmail account or other providers. You can also write these notifications to a local file, which isn't recommended for any amount of users over one.

{% highlight yaml %}
notifier:
  filesystem:
    filename: /config/notification.txt
{% endhighlight %}

#### users_database.yml

Github: [users_database.yml](https://github.com/Jellayy/jellayy.github.io/blob/master/resources/2022-09-25-traefik/authelia/users_database.yml)

Create your first user with the steps below:

- Change your displayname:

{% highlight yaml %}
users:
  example:
    displayname: "Example"
{% endhighlight %}

- Change your hashed password:

{% highlight yaml %}
password: "$argon2id$v=19$m=65536,t=3,p=4$d3hKRUpCSUhLMEhxVXdoZg$eChQ4l0qnt4oCE7Yaw+bVp1wi7/CO3PqlqEY+udUkYc"  # yamllint disable-line rule:line-length
{% endhighlight %}

> Authelia provides a tool for creating hashed passwords using the proper hashing algorithm. Generate a password by running `docker run authelia/authelia:latest authelia hash-password 'YOUR_PASSWORD'`

- Change your email address:

{% highlight yaml %}
email: example@example.com
{% endhighlight %}

### Creating the Container

After configuring your file structure, deploy Authelia with the compose below:

Github: [docker-compose.yml]()
{% highlight yaml %}
version: '3'

services:
  authelia:
    image: authelia/authelia
    container_name: authelia
    volumes:
      - /config/docker/authelia:/config
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authelia.rule=Host(`auth.example.com`)" # Change to your domain
      - "traefik.http.routers.authelia.entrypoints=https"
      - "traefik.http.routers.authelia.tls=true"
      - "traefik.http.routers.authelia.tls.certresolver=letsEncrypt"
      - "traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://auth.example.com" # Change to your domain
      - "traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email"
    expose:
      - 9091
    restart: unless-stopped
    environment:
      - TZ=America/Phoenix
    healthcheck:
      disable: true

networks:
  proxy:
    external: true
{% endhighlight %}

## Adding Docker Services to Authelia

Much like with Traefik, it is very easy to add containers to Authelia. Here's our same Homer example from before, but this time with Authelia:

{% highlight yaml %}
---
version: "2"
services:
  homer:
    image: b4bz/homer
    container_name: homer
    networks:
      - proxy # Required for Traefik
    volumes:
      - /homer_assets:/www/assets
    user: 1000:1000
    labels:
      - "traefik.docker.network=proxy"
      - "traefik.enable=true"
      - "traefik.http.routers.homer.rule=Host(`example.com`)"
      - "traefik.http.routers.homer.entrypoints=https"
      - "traefik.http.routers.homer.tls=true"
      - "traefik.http.services.homer.loadbalancer.server.port=8080"
      - "traefik.http.routers.homer.tls.certresolver=letsEncrypt"
      - "traefik.http.routers.homer.middlewares=authelia@docker" # This line adds the Authelia middleware to Homer
    restart: unless-stopped

networks:
  proxy: # Add a refrence to traefik's docker network here
    external: true
{% endhighlight %}

> With version 2.5 of traefik, you'll get Traefik logs saying `middleware \"authelia@docker\" does not exist`. These logs are a lie. This is apparently a known issue and Authelia is working correctly if you see these. I have not tested to see if this is fixed in newer versions.

### Updating access_control

It is likely that as you add services to Authelia, you may need to update the `access_control` section of your `configuration.yml`. By default, the config is set to deny access to undefined addresses, resulting in a `403: forbidden` when you visit the site.