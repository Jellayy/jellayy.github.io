---
title: "Traefik Reverse Proxy in Docker with TLS Certs"
header:
  image: /assets/images/2022-09-02-ultimate-truenas-guide/banner.png
toc: true
toc_sticky: true
categories:
  - Guides
tags:
  - Homelab
---

# Configuring Your Domain

## Cloudflare DNS

This setup will be based on using the Cloudflare API to manage DNS on your domain. We will be using DNS challenges to issue certs with LetsEncrypt.

### Import your domain as a Cloudflare site (Optional)

If you purchased your domain through cloudflare, feel free to skip this step. If you got your domain through another registrar, you can register your site through cloudflare using the steps below.

#### Change your DNS servers to Cloudflare's

If you haven't purchased your domain through Cloudflare, you can still continue with this guide by changing the DNS servers your domain uses over to Cloudflare's. Change your nameservers to: `connie.ns.cloudflare.com` and `cris.ns.cloudflare.com`

Here's an example using Hostinger's dashboard:

![Hostinger Example]({{ site.url }}{{ site.baseurl }}/assets/images/2022-09-25-traefik/nameservers.png)

#### Add your site to Cloudflare

After changing your DNS servers, you can add your site to Cloudflare under Websites>Add a Site. For our purposes, the free plan works fine.

### Create an API Key

Head over to the [Cloudflare API Tokens Page](https://dash.cloudflare.com/profile/api-tokens) and create a new API Token with `Zone.Zone` and `Zone.DNS` permissions on either just the sites you want or all of your sites.

![Cloudflare API Key]({{ site.url }}{{ site.baseurl }}/assets/images/2022-09-25-traefik/apikey.png)

# Deploying Traefik

## File Structure

Deploying Traefik isn't completely plug-and-play and needs some files to get started.

Wherever you wish to place your Traefik configuration files, create the following file structure. You'll need to create all files listed, traefik does not create them itself and will yell at you if you don't. Create `acme.json` as an empty file for traefik to fill, we will configure `traefik.yml` in the next step.

{% highlight bash %}
traefik
│   traefik.yml   
│
└───acme
│   │   acme.json
│   
└───dynamic
{% endhighlight %}

### traefik.yml

Below is an example basic configuration of `traefik.yml` that will serve our purposes for now:

{% highlight yaml %}
global:
  checkNewVersion: true
  sendAnonymousUsage: false  # true by default

# (Optional) Log information
log:
   level: INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL
   format: common  # common, json, logfmt
   filePath: /var/log/traefik/traefik.log

# (Optional) Enable API and Dashboard
api:
  dashboard: true  # true by default
  insecure: true  # Don't do this in production!

# Entry Points configuration
entryPoints:
  http:
    address: :80
  https:
    address: :443

# Configure your CertificateResolver here...
certificatesResolvers:
   letsEncrypt:
     acme:
       email: YOUR_EMAIL
       storage: /etc/traefik/acme/acme.json
       dnsChallenge:
         provider: cloudflare
         resolvers:
           - 1.1.1.1:53
           - 8.8.8.8:53
         delayBeforeCheck: 0

providers:
  docker:
    endpoint: unix:///var/run/docker.sock
    exposedByDefault: false  # Default is true
  file:
    # watch for dynamic configuration changes
    directory: /etc/traefik/dynamic
    watch: true
{% endhighlight %}

## Docker

### Proxy Network

Create a new attachable bridge network in Docker for Traefik to use. This can be done in the docker CLI or through a managment portal such as Portainer. We will attach our Traefik container and all other proxied containers to this network.

{% highlight bash %}
docker network create -d bridge --attachable proxy
{% endhighlight %}

![Portainer Network Create]({{ site.url }}{{ site.baseurl }}/assets/images/2022-09-25-traefik/portainer-network-create.png)

### Creating the Container

Deploy Traefik using Docker Compose:

{% highlight yaml %}
version: '3'

services:
  traefik:
    image: "traefik:v2.5"
    container_name: "traefik"
    environment:
      - CF_API_EMAIL=YOUR_EMAIL
      - CF_DNS_API_TOKEN=YOUR_API_KEY
      - CF_ZONE_API_TOKEN=YOUR_API_KEY
    networks:
      - proxy
    ports:
      - "80:80"
      - "443:443"
      # (Optional) Expose Dashboard
      - "42069:8080"  # Don't do this in production!
    volumes:
      - /config/docker/traefik-logs:/var/log/traefik
      - /config/docker/traefik:/etc/traefik
      - /var/run/docker.sock:/var/run/docker.sock:ro

networks:
  proxy:
    external: true
{% endhighlight %}

> Leaving your API keys exposed in docker-compose like this is not recommended. Environment variables in docker containers also aren't particularly secure. Running a secrets agent like the one built in to docker-swarm is recommended. Will I be covering that here? Absolutely not.

# Configuring local DNS

If you're using Traefik as a reverse proxy for exclusively local services, you will need to configure a wildcard DNS entry on your network's DNS server to point at Traefik, be that the DNS resolver on your router, or something more dedicated like a Pihole. Below I will include instructions for pfSense.

## pfSense

In pfSense you can create a wildcard entry in the `Custom Options` section of Unbound at Services>DNS Resolver>General Settings:

{% highlight bash %}
server:
local-zone: "example.com" redirect
local-data: "example.com 3600 IN A 192.168.1.54"
{% endhighlight %}

# Adding Docker Services to Traefik

Thankfully, once Traefik is configured, adding new services is a simple as adding some extra configuration to your containers. Here's a docker-compose example of deploying [Homer](https://github.com/bastienwirtz/homer), a static homepage service.

{% highlight yaml %}
---
version: "2"
services:
  homer:
    image: b4bz/homer
    container_name: homer
    networks:
      - proxy # Required for Traefik
    volumes:
      - /homer_assets:/www/assets
    user: 1000:1000
    labels:
      - "traefik.docker.network=proxy" # Connect to traefik's docker network
      - "traefik.enable=true" # Enable traefik
      - "traefik.http.routers.homer.rule=Host(`example.com`)" # Configure 'homer' router host rule
      - "traefik.http.routers.homer.entrypoints=https" # Enable https entrypoint on 'homer' router
      - "traefik.http.routers.homer.tls=true" # Enable tls on 'homer' router
      - "traefik.http.services.homer.loadbalancer.server.port=8080" # Port to redirect to in container
      - "traefik.http.routers.homer.tls.certresolver=letsEncrypt" # Use letsEncrypt certresolver defined in traefik.yml
    restart: unless-stopped

networks:
  proxy: # Add a refrence to traefik's docker network here
    external: true
{% endhighlight %}

If everything went well, your definied address should route to your service and your cert will be issued!

![Result]({{ site.url }}{{ site.baseurl }}/assets/images/2022-09-25-traefik/result.png)

# Authelia

Now that you have a reverse proxy setup, you can also setup a two-factor authentication service for the services behind traefik as well. Authelia is great for this.

## Deploying Authelia

### File Structure

Like Traefik, theres a bit of configuration we have to do before deploying Authelia. The file structure for Authelia is very simple:

{% highlight bash %}
authelia
│   configuration.yml 
│   users_database.yml 
{% endhighlight %}

Here is an example `configuration.yml` file to get started. There are quite a few things to configure in here, but for now just focus on creating a `jwt_secret` and changing the `default_redirection_url` to the address you will create with Traefik for Authelia.

{% highlight yaml %}
---
###############################################################
#                   Authelia configuration                    #
###############################################################

jwt_secret: a_very_important_secret
default_redirection_url: https://public.example.com

server:
  host: 0.0.0.0
  port: 9091

log:
  level: debug
# This secret can also be set using the env variables AUTHELIA_JWT_SECRET_FILE

totp:
  issuer: authelia.com

# duo_api:
#  hostname: api-123456789.example.com
#  integration_key: ABCDEF
#  # This secret can also be set using the env variables AUTHELIA_DUO_API_SECRET_KEY_FILE
#  secret_key: 1234567890abcdefghifjkl

authentication_backend:
  file:
    path: /config/users_database.yml
    password:
      algorithm: argon2id
      iterations: 1
      salt_length: 16
      parallelism: 8
      memory: 64

access_control:
  default_policy: deny
  rules:
    # Rules applied to everyone
    - domain: public.example.com
      policy: bypass
    - domain: traefik.example.com
      policy: one_factor
    - domain: secure.example.com
      policy: two_factor

session:
  name: authelia_session
  # This secret can also be set using the env variables AUTHELIA_SESSION_SECRET_FILE
  secret: unsecure_session_secret
  expiration: 3600  # 1 hour
  inactivity: 300  # 5 minutes
  domain: example.com  # Should match whatever your root protected domain is

  redis:
    host: redis
    port: 6379
    # This secret can also be set using the env variables AUTHELIA_SESSION_REDIS_PASSWORD_FILE
    # password: authelia

regulation:
  max_retries: 3
  find_time: 120
  ban_time: 300

storage:
  encryption_key: you_must_generate_a_random_string_of_more_than_twenty_chars_and_configure_this
  local:
    path: /config/db.sqlite3

notifier:
  smtp:
    username: test
    # This secret can also be set using the env variables AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE
    password: password
    host: mail.example.com
    port: 25
    sender: admin@example.com
...
{% endhighlight %}